/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
    griid v2

    The greedy grid that tries to do it all with LESS
   
    by Henry Bley-Vroman
    MIT license
    olets.github.io/griid/


  an easy-to-use grid system which supports three grid types:
  - single full-width single-row grids with cells of equal width;
  - multi-row grids with a specified number of equal-width columns;-
  - and multi-row grids with fraction-of-the-grid-width cell widths specified per-cell.
  In the latter two cases, if the last row of the grid isn't filled its cells will be center aligned

   by Henry Bley-Vroman,
   2016, MIT License.
   
   Uses inline-block, so does not work on IE below 9

*/

/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * config
 * 
 */
@griid--font-size: 16px;
@griid--gutter: 0;                                     // gte 0, any unit
@griid--row-spacing: 0;                                // gte 0, any unit
@griid--orphan-h-align: left;                          // default orphan alignment (left, center, or right)
@griid--item-v-align: top;                             // default grid-item vertical alignment (top, middle, or bottom)
@griid--min-cols: 2;                                   // set per-site to minimize css weight
@griid--max-cols: 6;                                   // set per-site to minimize css weight

/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * documentation
 * 
*//*
    
markup for griid's three grid types:

multi-row grids with equal-width cells look like
`.griid-x > .cell*n` (there will be x cells per row)

multi-row grids with unequal-width cells look like
`.griid` for the grid, `.cell-n-d` for a cell n/d of the row width. Add `.row-end` to the last cell in each row

single-row grids with equal-width, equal-height cells look like
`.griid > .cell`



bonus: the markup won't be as beautiful, but if
    you want a grid with equal-height rows where that height is determined from the cell content
    and you don't want to use a scripted solution (I love https://github.com/liabru/jquery-match-height)
    and your cells have roughly similar content,
    and you need to support orphan cells,
    you may be able to get away with

    `.griid > .row*y > .cell*x`

    This will give you a multi-row grid where all cells are the full height of the row
    (aka it's styled as an equal-width-cells table).
    If your cells have similar content, this may be a good-enough approximation of equal-height rows.
    
    Notes:
    
    If last row is full, this is exactly equivalant to `.griid*y > .cell*x`

    In most cases though you'll probably be better off using `.griid-x > .cell*(x*y)`

    


griid LESS:

griid **requires** initialization

A. Typical usage:
    1. Definitely: run `.griid--install` to have full griid support, using the @griid-- values.
    2. Likely: run adjustment functions in media queries to treat one grid as another in certain contexts (see griid-functions.less)
    3. Possibly: run `.griid--initialize` to revert any changes made by adjustment functions,
           or if you only need to reset a particular type of grid, you can save a little weight
           run `.griid--initialize-equal-cells`, `.griid--initialize-unequal-cells`, or `.griid--initialize-row`


B. Customizing your setup:
    The default installation from `.griid--install` will fit most needs, but you can also build a custom griid setup:

    1. `.griid--base` is always the first thing. It gives you support for multi-row grids, and is required by everything else
    2. `griid--inline-alignment` adds support for using alignment classes in your markup
            `.top`, `.middle`, `.bottom` give you inline overrides for cell content vertical alignment
            `.left`, `.center`, `.right` give you inline overrides for (when applied to a grid) orphan alignment and (when applied to a cell) content alignment
    3. `.griid--single-row` adds support for single-row grids with equal-width, equal-height cells
    4. `.griid--base`, with or without `.griid--inline-alignment` and `.griid--single-row`, still needs initialization.
            `.griid--initialize` gets you ready to go with single-row and multi-row columns
            Or run any of `.griid--initialize-equal-cells`, `.griid--initialize-unequal-cells`, or `.griid--initialize-row`

    Note: `.griid--base` is simply shorthand for `.griid--base; .griid--inline-alignment; .griid--initialize`

C. Overriding default variables

    The initialization functions can be re-run at any point to re-initialize with new settings or two wipe over customizations.

    1.
    .griid--initialize(
                       @fontSize: @griid--font-size,
                        (@maxColCount: @griid--max-cols,
                         (@minColCount: @griid--min-cols,
                          (@smallestDenominator: @griid--max-cols,
                           (@largestDenominator: @griid--min-cols))))
                      )


    2.
    .griid--initialize-equal-cells(
                                   @fontSize: @griid--font-size,
                                    (@maxColCount: @griid--max-cols,
                                     (@minColCount:@griid--min-cols))
                                  )


    3.
    .griid--initialize-unequal-cells(
                                     @fontSize: @griid--font-size, 
                                      (@denominatorOfNarrowestCells: @griid--max-cols,
                                       (@numeratorOfNarrowestCells: @griid--min-cols))
                                    )


    4. If you really want to, you can even do a custom `.griid--build`
      .griid--build(
                    @fontSize,
                     (@gutter,
                      (@rowSpacing,
                       (@orphanAlignment,
                        (@contentAlignment,
                         (@maxColCount,
                          (@minColCount,
                           (@smallestDenominator,
                            (@largestDenominator))))))))
                   )


*/






/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * general grid and cell layout
 * 
 */

@ie_friendly_100_percent: 99.99999%;                   // there's always one IE problem
/*.griid {
    border-collapse: separate;
    border-spacing: @griid--gutter;
}*/

.griid--base(@fontSize: @griid--font-size, @orphanAlignment: @griid--orphan-h-align, @contentAlignment: @griid--item-v-align,@rowSpacing: @griid--row-spacing) {
  [class*='griid'] {
      display: table;
      table-layout: fixed;
      width: 100%;
  //    overflow: hidden;
      font-size: 0;
      text-align: @orphanAlignment;
      > [class*='cell'] {
          position: relative;
          display: inline-block;                             // inline-blocks allow vertical and horizontal alignment
          margin-bottom: @rowSpacing;
          vertical-align: @contentAlignment;
          font-size: @fontSize;
          text-align: left;
  //        overflow: hidden;
          &.row-end { margin-right: 0 }
          &:last-child { margin-right: 0 !important}

          img {max-width: 100%}          // for good measure
      }
      .cell-1-1, .cell-full { width: @ie_friendly_100_percent }
  }
}

/****************************************************************
 * layout for single-row grid of equal-width, equal-height cells
 * 
 */
.griid--single-row(@fontSize: @griid--font-size) {
    .griid {
        > .row {
            display: table-row;
            > .cell {
                font-size: @fontSize
            }
        }
        > .cell, > .row > .cell {
            display: table-cell;
            width: 1%
        }
    }
}

/****************************************************************
 * optional support for inline class-defined alignment
 * 
 */
.griid--inline-alignment {
  [class*='griid'] {
      > [class*='cell'] {
          .top&, &.top { vertical-align: top }                      // make grid-item top-aligned
          .middle&, &.middle {vertical-align: middle}                  // make grid-item middle-aligned
          .bottom&, &.bottom {vertical-align: bottom}                  // make grid-item bottom-aligned
      }
      &, > [class*='cell'] {
          &.left {text-align: left}
          &.center {text-align: center}
          &.right {text-align: right}
      }
  }
}


/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * width calculations for multi-row grids
 * 
 */

/* width calculator for unequal and equal-width cells */
.griid--cell-width(@x) when not (@griid--gutter = 0) {
    @griid--gutters: (@x - 1) * @griid--gutter;
    width: calc(~'(@{ie_friendly_100_percent} - @{griid--gutters}) / @{x}');
}
.griid--cell-width(@x) when (@griid--gutter = 0) {    // account for calc limitation: can't subtract zero
    @griid--gutters: (@x - 1) * @griid--gutter;
    width: calc(~'@{ie_friendly_100_percent} / @{x}');
}


/* unequal-width cells */
/* 2: each fraction */
.griid--unequal-cell(@x) {
    margin-right: @griid--gutter;
    .griid--cell-width(@x)
}
/* 1: the loop */
.griid--fraction(@denominator, @i:1) when (@i < @denominator) {
    .cell-@{i}-@{denominator} { .griid--unequal-cell(@denominator/@i) };
    .griid--fraction(@denominator, (@i + 1))
}


/* equal-width cells */
/* 2: each column count */
.griid--equal-cell(@cols) when (@cols > 1) {
    &:nth-child(n) { margin-right: @griid--gutter }
    &:nth-child(@fooN) { margin-right: 0 }
    @fooN: ~"@{cols}n";
    .griid--cell-width(@cols)
}
/* 1: loop */
.griid--equal-cell(@cols) when not (@cols > 1) { width: @ie_friendly_100_percent }



/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * initialization mixin functions
 * 
 */

/* initialize equal-width cells  */
.griid--initialize-equal-helper(@maxColCount, @i) when (@i =< @maxColCount) {
    .griid-@{i} > .cell { .griid--equal-cell(@i) }
    .griid--initialize-equal-helper(@maxColCount, (@i + 1))
}
/* with a specified custom font size  */
.griid--initialize-equal-cells(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount:@griid--min-cols) when not (@fontSize = @griid--font-size) {
    [class*='griid'] > [class*='cell'] { font-size: @fontSize }
    .griid--initialize-equal-helper(@maxColCount, @minColCount)
}
/* with the default font size  */
.griid--initialize-equal-cells(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount:@griid--min-cols) when (@fontSize = @griid--font-size) {
    .griid--initialize-equal-helper(@maxColCount, @minColCount)
}


/* initialize unequal-width cells */
.griid--initialize-unequal-helper(@smallestDenominator, @i) when (@i =< @smallestDenominator) {
    .griid--fraction(@i);
    .griid--initialize-unequal-helper(@smallestDenominator, (@i + 1))
}
/* with a specified custom font size  */
.griid--initialize-unequal-cells(@fontSize: @griid--font-size, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols) when not (@fontSize = @griid--font-size) {
    [class*='griid'] > [class*='cell'] { font-size: @fontSize }
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator)
}
/* with the default font size  */
.griid--initialize-unequal-cells(@fontSize: @griid--font-size, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols) when (@fontSize = @griid--font-size) {
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator)
}


/* initial single-row grids */
.griid--initialize-row(@fontSize: @griid--font-size) {
    .griid--single-row(@fontSize);
}


/* initialize equal- and unequal-width cells */
.griid--initialize(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount: @griid--min-cols, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols)  when not (@fontSize = @griid--font-size) {
    .griid--initialize-row(@fontSize);
    [class*='griid'] > [class*='cell'] { font-size: @fontSize }
    .griid--initialize-equal-helper(@maxColCount, @minColCount);
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator)
}
.griid--initialize(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount: @griid--min-cols, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols)  when (@fontSize = @griid--font-size) {
    .griid--initialize-row(@fontSize);
    .griid--initialize-equal-helper(@maxColCount, @minColCount);
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator)
}

.griid--install(@fontSize: @griid--font-size, @gutter: @griid--gutter, @rowSpacing: @griid--row-spacing, @orphanAlignment: @griid--orphan-h-align, @contentAlignment: @griid--item-v-align, @maxColCount: @griid--max-cols, @minColCount: @griid--min-cols, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols) {
    .griid--base(@fontSize, @orphanAlignment, @contentAlignment, @rowSpacing);
    .griid--inline-alignment;
    .griid--initialize(@griid--font-size, @maxColCount, @minColCount, @smallestDenominator, @largestDenominator)
}
