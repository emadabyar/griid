/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************

    griid v2.5.1

    The greedy grid that tries to do it all with LESS
   
    by Henry Bley-Vroman
    MIT license
    olets.github.io/griid/

    (comprehensive documentation on github)


  an easy-to-use grid system which supports three grid types:
  - single full-width single-row grids with cells of equal width;
  - multi-row grids with a specified number of equal-width columns;-
  - and multi-row grids with fraction-of-the-grid-width cell widths specified per-cell.
  In the latter two cases, if the last row of the grid isn't filled its cells will be center aligned

   by Henry Bley-Vroman,
   2016, MIT License.
   
   Relies on nth-child, so does not work on IE below 9

*/

/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * config
 * 
 * griid requires
 *     @griid--gutter, @griid--row-spacing, @griid--orphan-h-align, @griid--item-v-align, @griid--min-cols, @griid--max-cols,
 *     @griid--font-size, and @griid--font-unit
 *
 * by default, these are defined in grid-config.less
 */



/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * general grid and cell layout
 * 
 */

@ie_friendly_100_percent: 99.99999%;                       // there's always one IE problem

.griid--base(@fontSize: @griid--font-size, @orphanAlignment: @griid--orphan-h-align, @contentAlignment: @griid--item-v-align,@rowSpacing: @griid--row-spacing) {
    [class*='griid'] {
        display: table;
        width: 100%;
        // overflow: hidden;
        font-size: 0;                                      // keeps the whitespace between cells zero-widthed
        text-align: @orphanAlignment;                      // alignment of cells in unfilled last rows
        > [class*='cell'] {
            display: inline-block;                         // inline-blocks allow vertical and horizontal alignment
            position: relative;
            margin-bottom: @rowSpacing;
            vertical-align: @contentAlignment;
            text-align: left;                 
            .griid--set-font-size(@fontSize);             // reverts cell content to default (otherwise would inherit @orphanAlignment)
            // overflow: hidden;
            &:last-child { margin-right: 0 !important}     // makes sure center- and right-aligned orphans line up with cells in preceding rows

            img {max-width: 100%}                          // for good measure
        }
    }
}
.griid--set-font-size(@fontSize: @griid--font-size, @fontSizeUnit: @griid--font-unit) {
    font-size: unit(@fontSize, @fontSizeUnit);
}

/****************************************************************
 * layout for single-row grid of equal-width, equal-height cells
 * 
 */
.griid--single-row(@fontSize: @griid--font-size, @gutter: @griid--gutter) {         // .griid--single-row is included in griid--install
    .griid {
        table-layout: fixed;                               // equal-width cells are the result of a table-layout:fixed table
        > .row {
            display: table-row;
            > .cell { .griid--set-font-size(@fontSize) }
        }
        > .cell, > .row > .cell {
            display: table-cell;                           // in combination with 1%-wide table-cells
            width: 1%;
            border-right: @gutter solid transparent;
        }
    }
}
.griid--space-single-row(@gutter: @griid--gutter) {                                    // .griid--space-single-row is NOT included in griid-install
    .griid {                                               // remember that border-spacing applies to the outside edges of the table, 
        border-collapse: separate;                         // so if this is used `.griid .cell`s will not line up with `.griid-x .cells` or `.griid .cell-n-d`s
        border-spacing: @gutter;
    }
}

/****************************************************************
 * optional support for inline class-defined alignment
 * 
 */
.griid--inline-alignment() {                               // .griid--inline-alignment is included in griid--install
    [class*='griid'] {
        > [class*='cell'] {                                // vertical alignment classes apply to cells, regardless of whether they're added to a cell's or grid's markup
            .top&, &.top { vertical-align: top }           // make grid-item top-aligned
            .middle&, &.middle {vertical-align: middle}    // make grid-item middle-aligned
            .bottom&, &.bottom {vertical-align: bottom}    // make grid-item bottom-aligned
        }
        &, > [class*='cell'] {                             // horizontal alignment classes apply to the grid (ie orphan alignment) or cell
            &.left {text-align: left}                      // on grids: make orphans align left; on cells: make content align left
            &.center {text-align: center}                  // on grids: make orphans align center; on cells: make content align center
            &.right {text-align: right}                    // on grids: make orphans align right; on cells: make content align right
        }
    }
}


/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * width calculations for multi-row grids
 * 
 */

/* width calculator for unequal and equal-width cells */
.griid--cell-width(@x, @gutter: @griid--gutter) when not ((@x - 1) * @gutter = 0) {
    @griid--gutters: (@x - 1) * @gutter;
    width: calc(~'(@{ie_friendly_100_percent} - @{griid--gutters}) / @{x}');
}
.griid--cell-width(@x, @gutter: @griid--gutter) when ((@x - 1) * @gutter = 0) {         // account for calc limitation: can't subtract zero
    @griid--gutters: (@x - 1) * @gutter;
    width: calc(~'@{ie_friendly_100_percent} / @{x}');
}


/* unequal-width cells */
/* 2: each fraction */
.griid--unequal-cell(@x, @gutter: @griid--gutter) when (@x = 1) {
    margin-right: 0;
    .griid--cell-width(@x, @gutter)
}
.griid--unequal-cell(@x, @gutter: @griid--gutter) when not (@x = 1) {
    margin-right: @gutter;
    .griid--cell-width(@x, @gutter)
}
/* 1: the loop */
.griid--fraction(@denominator, @gutter: @griid--gutter, @i:1) when (@i < @denominator) {
    .cell-@{i}-@{denominator} { .griid--unequal-cell(@denominator/@i, @gutter) };
    .griid--fraction(@denominator, @gutter, (@i + 1))
}


/* equal-width cells */
/* 2: each column count */
.griid--equal-cell(@cols, @gutter: @griid--gutter) when (@cols > 1) {
    &:nth-child(n) { margin-right: @gutter }
    &:nth-child(@{fooN}) { margin-right: 0 }
    @fooN: ~"@{cols}n";
    .griid--cell-width(@cols, @gutter)
}
/* 1: loop */
.griid--equal-cell(@cols) when not (@cols > 1) {
    &:nth-child(n) {
        margin-right: 0;
    }
    width: @ie_friendly_100_percent
}



/**********************************************************************************************************************************
 **********************************************************************************************************************************
 **********************************************************************************************************************************
 * initialization mixin functions
 * 
 */

/* font size */
.griid--font-size(@fontSize: @griid--font-size) {
    [class*='griid'] > [class*='cell'],                    // can be applied upstream of a grid
    &[class*='griid'] > [class*='cell'] {                  // or directly on a griid
        .griid--set-font-size(@fontSize)
    }
}


/* initialize equal-width cells  */
.griid--initialize-equal-helper(@maxColCount, @i, @gutter) when (@i =< @maxColCount) {
    .griid-@{i} > .cell { .griid--equal-cell(@i, @gutter) }
    .griid--initialize-equal-helper(@maxColCount, (@i + 1), @gutter)
}
/* with a specified custom font size  */
.griid--initialize-equal-cells(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount:@griid--min-cols, @gutter: @griid--gutter) when not (@fontSize = @griid--font-size) {
    .griid--font-size(@fontSize);
    .griid--initialize-equal-helper(@maxColCount, @minColCount, @gutter)
}
/* with the default font size  */
.griid--initialize-equal-cells(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount:@griid--min-cols, @gutter: @griid--gutter) when (@fontSize = @griid--font-size) {
    .griid--initialize-equal-helper(@maxColCount, @minColCount, @gutter)
}


/* initialize unequal-width cells */
.griid--initialize-unequal-helper(@smallestDenominator, @i, @gutter: @griid--gutter) when (@i =< @smallestDenominator) {
    .griid--fraction(@i, @gutter);
    .griid--initialize-unequal-helper(@smallestDenominator, (@i + 1), @gutter)
}
/* with a specified custom font size  */
.griid--initialize-unequal-cells(@fontSize: @griid--font-size, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols, @gutter: @griid--gutter) when not (@fontSize = @griid--font-size) {
    .griid--font-size(@fontSize);
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator, @gutter)
}
/* with the default font size  */
.griid--initialize-unequal-cells(@fontSize: @griid--font-size, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols, @gutter: @griid--gutter) when (@fontSize = @griid--font-size) {
    [class*='griid'] > [class*='cell'].row-end { margin-right: 0 }
    .cell-1-1, .cell-full { width: @ie_friendly_100_percent }
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator, @gutter)
}


/* initial single-row grids */
.griid--initialize-row(@fontSize: @griid--font-size, @gutter: @griid--gutter) {
    .griid--single-row(@fontSize, @gutter);
}


/* initialize equal- and unequal-width cells */
.griid--initialize(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount: @griid--min-cols, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols, @gutter: @griid--gutter)  when not (@fontSize = @griid--font-size) {
    .griid--initialize-row(@fontSize, @gutter);
    .griid--font-size(@fontSize);
    .griid--initialize-equal-helper(@maxColCount, @minColCount, @gutter);
    [class*='griid'] > [class*='cell'].row-end { margin-right: 0 }
    .cell-1-1, .cell-full { width: @ie_friendly_100_percent }
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator, @gutter)
}
.griid--initialize(@fontSize: @griid--font-size, @maxColCount: @griid--max-cols, @minColCount: @griid--min-cols, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols, @gutter: @griid--gutter)  when (@fontSize = @griid--font-size) {
    .griid--initialize-row(@fontSize, @gutter);
    .griid--initialize-equal-helper(@maxColCount, @minColCount, @gutter);
    [class*='griid'] > [class*='cell'].row-end { margin-right: 0 }
    .cell-1-1, .cell-full { width: @ie_friendly_100_percent }
    .griid--initialize-unequal-helper(@smallestDenominator, @largestDenominator, @gutter)
}

.griid--install(@fontSize: @griid--font-size, @gutter: @griid--gutter, @rowSpacing: @griid--row-spacing, @orphanAlignment: @griid--orphan-h-align, @contentAlignment: @griid--item-v-align, @maxColCount: @griid--max-cols, @minColCount: @griid--min-cols, @smallestDenominator: @griid--max-cols, @largestDenominator: @griid--min-cols) {
    .griid--base(@fontSize, @orphanAlignment, @contentAlignment, @rowSpacing);
    .griid--initialize(@fontSize, @maxColCount, @minColCount, @smallestDenominator, @largestDenominator, @gutter)
}